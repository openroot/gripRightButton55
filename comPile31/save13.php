<?php
	namespace comPile31\save13;
?>

<?php
	class readFile {
		private string $name = "";
		private ?int $size = null;
		private ?array $content = null;

		function __construct(string $name) {
			$this->name = $name;
			$this->read();
		}

		private function read(): void {
			$file = null;
			$file = fopen($this->name, "r");
			if ($file) {
				$this->size = filesize($this->name);
				if ($this->size > 0) {
					$this->content = [];
					while (!feof($file)) {
						array_push($this->content, fgets($file));
					}
					fclose($file);
				}
			}
		}

		public function fromName(): string {
			return $this->name;
		}

		public function fromSize(): ?int {
			return $this->size;
		}

		public function fromContent(): ?array {
			return $this->content;
		}
	}
?>

<?php
	class structure {
		private ?array $divisions = null;
		private const allowedLengthUnit = 3621;

		function __construct(array $divisions) {
			$this->divisions = [];
			foreach ($divisions as $sections) {
				$division = new division($sections);
				array_push($this->divisions, $division);
			}
		}

		public function fromDivisions(): ?array {
			return $this->divisions;
		}
	}

	class division {
		private ?string $sections = null;

		function __construct(string $sections) {
			$this->sections = $sections ?? "";
		}

		public function fromSections(): ?string {
			return $this->sections;
		}
	}

	class section {
		private ?int $sectionNumber = null;
		private ?string $segment = null;

		public const acceptableTableMultiplier = [
			31 => 1,
			5 => 2,
			14 => 3,
			18 => 4
		];
		public const rangeSectionNumber = [ // Registering
			1 => [1 => [1, 2, 3, 4, 5]],
			2 => [1 => [1, 2, 3, 4, 5]],
			3 => [1 => [1, 2, 3, 4, 5]],
			4 => [1 => [1, 2, 3, 4, 5]],
			5 => [1 => [1, 2, 3, 4, 5]],
			6 => [1 => [1, 2, 3, 4, 5]],
			7 => [1 => [1, 2, 3, 4, 5]],
			8 => [1 => [1, 2, 3, 4, 5]],
			9 => [1 => [1, 2, 3, 4, 5]],
			10 => [1 => [1, 2, 3, 4, 5]],
			11 => [1 => [1, 2, 3, 4, 5]],
			12 => [1 => [1, 2, 3, 4, 5]],
			13 => [1 => [1, 2, 3, 4, 5]],
			14 => [1 => [1, 2, 3, 4, 5]],
			15 => [1 => [1, 2, 3, 4, 5]],
			16 => [1 => [1, 2, 3, 4, 5]],
			17 => [1 => [1, 2, 3, 4, 5]],
			18 => [1 => [1, 2, 3, 4, 5]],
			19 => [1 => [1, 2, 3, 4, 5]],
			20 => [1 => [1, 2, 3, 4, 5]],
			21 => [1 => [1, 2, 3, 4, 5]],
			22 => [1 => [1, 2, 3, 4, 5]],
			23 => [1 => [1, 2, 3, 4, 5]],
			24 => [1 => [1, 2, 3, 4, 5]],
			25 => [1 => [1, 2, 3, 4, 5]],
			26 => [1 => [1, 2, 3, 4, 5]],
			27 => [1 => [1, 2, 3, 4, 5]],
			28 => [1 => [1, 2, 3, 4, 5]],
			29 => [1 => [1, 2, 3, 4]],
			30 => [1 => [1, 2, 3, 4]],
			31 => [1 => [1, 2, 3, 4, 5]]
		];
		public const allowedLengthUnit = [ // Allowing
			1 => [1 => [1 => [2], 2 => [19], 3 => [64], 4 => [29], 5 => [3]]],
			2 => [1 => [1 => [2], 2 => [19], 3 => [64], 4 => [29], 5 => [3]]],
			3 => [1 => [1 => [2], 2 => [19], 3 => [64], 4 => [29], 5 => [3]]],
			4 => [1 => [1 => [2], 2 => [19], 3 => [64], 4 => [29], 5 => [3]]],
			5 => [1 => [1 => [2], 2 => [19], 3 => [64], 4 => [29], 5 => [3]]],
			6 => [1 => [1 => [2], 2 => [19], 3 => [64], 4 => [29], 5 => [3]]],
			7 => [1 => [1 => [2], 2 => [19], 3 => [64], 4 => [29], 5 => [3]]],
			8 => [1 => [1 => [2], 2 => [19], 3 => [64], 4 => [29], 5 => [3]]],
			9 => [1 => [1 => [2], 2 => [19], 3 => [64], 4 => [29], 5 => [3]]],
			10 => [1 => [1 => [2], 2 => [19], 3 => [64], 4 => [29], 5 => [3]]],
			11 => [1 => [1 => [2], 2 => [19], 3 => [64], 4 => [29], 5 => [3]]],
			12 => [1 => [1 => [2], 2 => [19], 3 => [64], 4 => [29], 5 => [3]]],
			13 => [1 => [1 => [2], 2 => [19], 3 => [64], 4 => [29], 5 => [3]]],
			14 => [1 => [1 => [2], 2 => [19], 3 => [64], 4 => [29], 5 => [3]]],
			15 => [1 => [1 => [2], 2 => [19], 3 => [64], 4 => [29], 5 => [3]]],
			16 => [1 => [1 => [2], 2 => [19], 3 => [64], 4 => [29], 5 => [3]]],
			17 => [1 => [1 => [2], 2 => [19], 3 => [64], 4 => [29], 5 => [3]]],
			18 => [1 => [1 => [2], 2 => [19], 3 => [64], 4 => [29], 5 => [3]]],
			19 => [1 => [1 => [2], 2 => [19], 3 => [64], 4 => [29], 5 => [3]]],
			20 => [1 => [1 => [2], 2 => [19], 3 => [64], 4 => [29], 5 => [3]]],
			21 => [1 => [1 => [2], 2 => [19], 3 => [64], 4 => [29], 5 => [3]]],
			22 => [1 => [1 => [2], 2 => [19], 3 => [64], 4 => [29], 5 => [3]]],
			23 => [1 => [1 => [2], 2 => [19], 3 => [64], 4 => [29], 5 => [3]]],
			24 => [1 => [1 => [2], 2 => [19], 3 => [64], 4 => [29], 5 => [3]]],
			25 => [1 => [1 => [2], 2 => [19], 3 => [64], 4 => [29], 5 => [3]]],
			26 => [1 => [1 => [2], 2 => [19], 3 => [64], 4 => [29], 5 => [3]]],
			27 => [1 => [1 => [2], 2 => [19], 3 => [64], 4 => [29], 5 => [3]]],
			28 => [1 => [1 => [2], 2 => [19], 3 => [64], 4 => [29], 5 => [3]]],
			29 => [1 => [1 => [2], 2 => [19], 3 => [64], 4 => [1 => [21], 2 => [8]]]],
			30 => [1 => [1 => [2], 2 => [19], 3 => [64], 4 => [29]]],
			31 => [1 => [1 => [2], 2 => [19], 3 => [64], 4 => [29], 5 => [3]]]
		];
		private const verifyCountTotal = [ // Verifying
			1 => [1 => 117],
			2 => [1 => 117],
			3 => [1 => 117],
			4 => [1 => 117],
			5 => [1 => 117],
			6 => [1 => 117],
			7 => [1 => 117],
			8 => [1 => 117],
			9 => [1 => 117],
			10 => [1 => 117],
			11 => [1 => 117],
			12 => [1 => 117],
			13 => [1 => 117],
			14 => [1 => 117],
			15 => [1 => 117],
			16 => [1 => 117],
			17 => [1 => 117],
			18 => [1 => 117],
			19 => [1 => 117],
			20 => [1 => 117],
			21 => [1 => 117],
			22 => [1 => 117],
			23 => [1 => 117],
			24 => [1 => 117],
			25 => [1 => 117],
			26 => [1 => 117],
			27 => [1 => 117],
			28 => [1 => 117],
			29 => [1 => 114],
			30 => [1 => 114],
			31 => [1 => 117]
		];
		private const commonIdentificationString = [ // Moderating
			1 => [
				1 => ["o", "¶¶"],
				2 => ["x", "®®"],
				3 => ["1", "«»"],
				4 => ["2", "<>"],
				5 => ["3", "!!"],
				6 => ["4", "&&"],
				7 => ["5", "||"],
				8 => ["6", "__"],
				9 => ["7", "§§"],
				10 => ["8", "~~"],
				11 => ["9", "¦¦"],
				12 => ["10", "##"],
				13 => ["11", "??"],
				14 => ["12", ";;"],
				15 => ["13", "@@"],
				16 => ["14", "^^"],
				17 => ["15", "[]"],
				18 => ["16", "{}"],
				19 => ["17", "()"],
				20 => ["18", "××"],
				21 => ["19", "÷÷"],
				22 => ["20", "++"],
				23 => ["21", "--"],
				24 => ["22", "%%"],
				25 => ["23", "=="],
				26 => ["24", "¤¤"],
				27 => ["25", "©©"],
				28 => ["26", ",,"],
				29 => ["t", "±±"],
				30 => ["u", "µµ"],
				31 => ["+-", "**"]
			],
			2 => [
				1 => "o",
				2 => "x",
				3 => "t",
				4 => "u",
				5 => "+-"
			],
			3 => [
				1 => "o",
				2 => "x",
				3 => "1",
				4 => "2",
				5 => "3",
				6 => "4",
				7 => "5",
				8 => "6",
				9 => "7",
				10 => "8",
				11 => "9",
				12 => "t",
				13 => "u",
				14 => "+-"
			],
			4 => [
				1 => "o",
				2 => "x",
				3 => "1",
				4 => "2",
				5 => "3",
				6 => "4",
				7 => "5",
				8 => "6",
				9 => "7",
				10 => "8",
				11 => "9",
				12 => "10",
				13 => "11",
				14 => "12",
				15 => "13",
				16 => "t",
				17 => "u",
				18 => "+-"
			]
		];

		function __construct(int $sectionNumber, string $segment) {
			$this->segment = $segment ?? "";
		}

		public function fromSegment(): ?string {
			return $this->segment;
		}
	}
?>